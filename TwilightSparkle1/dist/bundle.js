!function(){"use strict";const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const t=Object.create(null);Object.keys(e).forEach((n=>{t[e[n]]=n}));const n={type:"error",data:"parser error"},s="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,o=({type:t,data:n},o,a)=>{return s&&n instanceof Blob?o?a(n):r(n,a):i&&(n instanceof ArrayBuffer||(c=n,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(c):c&&c.buffer instanceof ArrayBuffer))?o?a(n):r(new Blob([n]),a):a(e[t]+(n||""));var c},r=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+(e||""))},n.readAsDataURL(e)},a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",c="undefined"==typeof Uint8Array?[]:new Uint8Array(256);for(let e=0;e<64;e++)c[a.charCodeAt(e)]=e;const d="function"==typeof ArrayBuffer,h=(e,s)=>{if("string"!=typeof e)return{type:"message",data:u(e,s)};const i=e.charAt(0);if("b"===i)return{type:"message",data:l(e.substring(1),s)};return t[i]?e.length>1?{type:t[i],data:e.substring(1)}:{type:t[i]}:n},l=(e,t)=>{if(d){const n=(e=>{let t,n,s,i,o,r=.75*e.length,a=e.length,d=0;"="===e[e.length-1]&&(r--,"="===e[e.length-2]&&r--);const h=new ArrayBuffer(r),l=new Uint8Array(h);for(t=0;t<a;t+=4)n=c[e.charCodeAt(t)],s=c[e.charCodeAt(t+1)],i=c[e.charCodeAt(t+2)],o=c[e.charCodeAt(t+3)],l[d++]=n<<2|s>>4,l[d++]=(15&s)<<4|i>>2,l[d++]=(3&i)<<6|63&o;return h})(e);return u(n,t)}return{base64:!0,data:e}},u=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e,p=String.fromCharCode(30);function m(e){if(e)return function(e){for(var t in m.prototype)e[t]=m.prototype[t];return e}(e)}m.prototype.on=m.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},m.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},m.prototype.off=m.prototype.removeListener=m.prototype.removeAllListeners=m.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,s=this._callbacks["$"+e];if(!s)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var i=0;i<s.length;i++)if((n=s[i])===t||n.fn===t){s.splice(i,1);break}return 0===s.length&&delete this._callbacks["$"+e],this},m.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],s=1;s<arguments.length;s++)t[s-1]=arguments[s];if(n){s=0;for(var i=(n=n.slice(0)).length;s<i;++s)n[s].apply(this,t)}return this},m.prototype.emitReserved=m.prototype.emit,m.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},m.prototype.hasListeners=function(e){return!!this.listeners(e).length};const f="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function g(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})}const y=f.setTimeout,E=f.clearTimeout;function v(e,t){t.useNativeTimers?(e.setTimeoutFn=y.bind(f),e.clearTimeoutFn=E.bind(f)):(e.setTimeoutFn=f.setTimeout.bind(f),e.clearTimeoutFn=f.clearTimeout.bind(f))}class b extends Error{constructor(e,t,n){super(e),this.description=t,this.context=n,this.type="TransportError"}}class B extends m{constructor(e){super(),this.writable=!1,v(this,e),this.opts=e,this.query=e.query,this.socket=e.socket}onError(e,t,n){return super.emitReserved("error",new b(e,t,n)),this}open(){return this.readyState="opening",this.doOpen(),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState&&this.write(e)}onOpen(){this.readyState="open",this.writable=!0,super.emitReserved("open")}onData(e){const t=h(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emitReserved("packet",e)}onClose(e){this.readyState="closed",super.emitReserved("close",e)}pause(e){}}const k="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),w=64,I={};let _,L=0,C=0;function A(e){let t="";do{t=k[e%w]+t,e=Math.floor(e/w)}while(e>0);return t}function O(){const e=A(+new Date);return e!==_?(L=0,_=e):e+"."+A(L++)}for(;C<w;C++)I[k[C]]=C;function R(e){let t="";for(let n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t}let T=!1;try{T="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){}const N=T;function x(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||N))return new XMLHttpRequest}catch(e){}if(!t)try{return new(f[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}function S(){}const P=null!=new x({xdomain:!1}).responseType;class q extends m{constructor(e,t){super(),v(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=g(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new x(e);try{t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=q.requestsCount++,q.requests[this.index]=this)}onError(e){this.emitReserved("error",e,this.xhr),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=S,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete q.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&(this.emitReserved("data",e),this.emitReserved("success"),this.cleanup())}abort(){this.cleanup()}}if(q.requestsCount=0,q.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",D);else if("function"==typeof addEventListener){addEventListener("onpagehide"in f?"pagehide":"unload",D,!1)}function D(){for(let e in q.requests)q.requests.hasOwnProperty(e)&&q.requests[e].abort()}const F="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),j=f.WebSocket||f.MozWebSocket,M="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();const U={websocket:class extends B{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=M?{}:g(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=M?new j(e,t,n):t?new j(e,t):new j(e)}catch(e){return this.emitReserved("error",e)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=e=>this.onClose({description:"websocket connection closed",context:e}),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],s=t===e.length-1;o(n,this.supportsBinary,(e=>{try{this.ws.send(e)}catch(e){}s&&F((()=>{this.writable=!0,this.emitReserved("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=O()),this.supportsBinary||(e.b64=1);const s=R(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(s.length?"?"+s:"")}check(){return!!j}},polling:class extends B{constructor(e){if(super(e),this.polling=!1,"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=P&&!t}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(e++,this.once("pollComplete",(function(){--e||t()}))),this.writable||(e++,this.once("drain",(function(){--e||t()})))}else t()}poll(){this.polling=!0,this.doPoll(),this.emitReserved("poll")}onData(e){((e,t)=>{const n=e.split(p),s=[];for(let e=0;e<n.length;e++){const i=h(n[e],t);if(s.push(i),"error"===i.type)break}return s})(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose({description:"transport closed by the server"}),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emitReserved("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const e=()=>{this.write([{type:"close"}])};"open"===this.readyState?e():this.once("open",e)}write(e){this.writable=!1,((e,t)=>{const n=e.length,s=new Array(n);let i=0;e.forEach(((e,r)=>{o(e,!1,(e=>{s[r]=e,++i===n&&t(s.join(p))}))}))})(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emitReserved("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=O()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const s=R(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(s.length?"?"+s:"")}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new q(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",((e,t)=>{this.onError("xhr post error",e,t)}))}doPoll(){const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",((e,t)=>{this.onError("xhr poll error",e,t)})),this.pollXhr=e}}},V=/^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,H=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];function K(e){const t=e,n=e.indexOf("["),s=e.indexOf("]");-1!=n&&-1!=s&&(e=e.substring(0,n)+e.substring(n,s).replace(/:/g,";")+e.substring(s,e.length));let i=V.exec(e||""),o={},r=14;for(;r--;)o[H[r]]=i[r]||"";return-1!=n&&-1!=s&&(o.source=t,o.host=o.host.substring(1,o.host.length-1).replace(/;/g,":"),o.authority=o.authority.replace("[","").replace("]","").replace(/;/g,":"),o.ipv6uri=!0),o.pathNames=function(e,t){const n=/\/{2,9}/g,s=t.replace(n,"/").split("/");"/"!=t.slice(0,1)&&0!==t.length||s.splice(0,1);"/"==t.slice(-1)&&s.splice(s.length-1,1);return s}(0,o.path),o.queryKey=function(e,t){const n={};return t.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,s){t&&(n[t]=s)})),n}(0,o.query),o}let Y=class e extends m{constructor(e,t={}){super(),this.writeBuffer=[],e&&"object"==typeof e&&(t=e,e=null),e?(e=K(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=K(t.host).host),v(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,addTrailingSlash:!0,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+(this.opts.addTrailingSlash?"/":""),"string"==typeof this.opts.query&&(this.opts.query=function(e){let t={},n=e.split("&");for(let e=0,s=n.length;e<s;e++){let s=n[e].split("=");t[decodeURIComponent(s[0])]=decodeURIComponent(s[1])}return t}(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&(this.beforeunloadEventListener=()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())},addEventListener("beforeunload",this.beforeunloadEventListener,!1)),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close",{description:"network connection lost"})},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){const t=Object.assign({},this.opts.query);t.EIO=4,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new U[e](n)}open(){let t;if(this.opts.rememberUpgrade&&e.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(e){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(e){this.transport&&this.transport.removeAllListeners(),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(e=>this.onClose("transport close",e)))}probe(t){let n=this.createTransport(t),s=!1;e.priorWebsocketSuccess=!1;const i=()=>{s||(n.send([{type:"ping",data:"probe"}]),n.once("packet",(t=>{if(!s)if("pong"===t.type&&"probe"===t.data){if(this.upgrading=!0,this.emitReserved("upgrading",n),!n)return;e.priorWebsocketSuccess="websocket"===n.name,this.transport.pause((()=>{s||"closed"!==this.readyState&&(h(),this.setTransport(n),n.send([{type:"upgrade"}]),this.emitReserved("upgrade",n),n=null,this.upgrading=!1,this.flush())}))}else{const e=new Error("probe error");e.transport=n.name,this.emitReserved("upgradeError",e)}})))};function o(){s||(s=!0,h(),n.close(),n=null)}const r=e=>{const t=new Error("probe error: "+e);t.transport=n.name,o(),this.emitReserved("upgradeError",t)};function a(){r("transport closed")}function c(){r("socket closed")}function d(e){n&&e.name!==n.name&&o()}const h=()=>{n.removeListener("open",i),n.removeListener("error",r),n.removeListener("close",a),this.off("close",c),this.off("upgrading",d)};n.once("open",i),n.once("error",r),n.once("close",a),this.once("close",c),this.once("upgrading",d),n.open()}onOpen(){if(this.readyState="open",e.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade){let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.maxPayload=e.maxPayload,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){if("closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length){const e=this.getWritablePackets();this.transport.send(e),this.prevBufferLen=e.length,this.emitReserved("flush")}}getWritablePackets(){if(!(this.maxPayload&&"polling"===this.transport.name&&this.writeBuffer.length>1))return this.writeBuffer;let e=1;for(let n=0;n<this.writeBuffer.length;n++){const s=this.writeBuffer[n].data;if(s&&(e+="string"==typeof(t=s)?function(e){let t=0,n=0;for(let s=0,i=e.length;s<i;s++)t=e.charCodeAt(s),t<128?n+=1:t<2048?n+=2:t<55296||t>=57344?n+=3:(s++,n+=4);return n}(t):Math.ceil(1.33*(t.byteLength||t.size))),n>0&&e>this.maxPayload)return this.writeBuffer.slice(0,n);e+=2}var t;return this.writeBuffer}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,s){if("function"==typeof t&&(s=t,t=void 0),"function"==typeof n&&(s=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const i={type:e,data:t,options:n};this.emitReserved("packetCreate",i),this.writeBuffer.push(i),s&&this.once("flush",s),this.flush()}close(){const e=()=>{this.onClose("forced close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(t){e.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&(removeEventListener("beforeunload",this.beforeunloadEventListener,!1),removeEventListener("offline",this.offlineEventListener,!1)),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const s=e.length;for(;n<s;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}};Y.protocol=4;const z="function"==typeof ArrayBuffer,W=e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer,G=Object.prototype.toString,$="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===G.call(Blob),J="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===G.call(File);function Q(e){return z&&(e instanceof ArrayBuffer||W(e))||$&&e instanceof Blob||J&&e instanceof File}function X(e,t){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let t=0,n=e.length;t<n;t++)if(X(e[t]))return!0;return!1}if(Q(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return X(e.toJSON(),!0);for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&X(e[t]))return!0;return!1}function Z(e){const t=[],n=e.data,s=e;return s.data=ee(n,t),s.attachments=t.length,{packet:s,buffers:t}}function ee(e,t){if(!e)return e;if(Q(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let s=0;s<e.length;s++)n[s]=ee(e[s],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const s in e)Object.prototype.hasOwnProperty.call(e,s)&&(n[s]=ee(e[s],t));return n}return e}function te(e,t){return e.data=ne(e.data,t),delete e.attachments,e}function ne(e,t){if(!e)return e;if(e&&!0===e._placeholder){if("number"==typeof e.num&&e.num>=0&&e.num<t.length)return t[e.num];throw new Error("illegal attachments")}if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=ne(e[n],t);else if("object"==typeof e)for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(e[n]=ne(e[n],t));return e}const se=["connect","connect_error","disconnect","disconnecting","newListener","removeListener"];var ie;!function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(ie||(ie={}));function oe(e){return"[object Object]"===Object.prototype.toString.call(e)}class re extends m{constructor(e){super(),this.reviver=e}add(e){let t;if("string"==typeof e){if(this.reconstructor)throw new Error("got plaintext data when reconstructing a packet");t=this.decodeString(e);const n=t.type===ie.BINARY_EVENT;n||t.type===ie.BINARY_ACK?(t.type=n?ie.EVENT:ie.ACK,this.reconstructor=new ae(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t)}else{if(!Q(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===ie[n.type])throw new Error("unknown packet type "+n.type);if(n.type===ie.BINARY_EVENT||n.type===ie.BINARY_ACK){const s=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const i=e.substring(s,t);if(i!=Number(i)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(i)}if("/"===e.charAt(t+1)){const s=t+1;for(;++t;){if(","===e.charAt(t))break;if(t===e.length)break}n.nsp=e.substring(s,t)}else n.nsp="/";const s=e.charAt(t+1);if(""!==s&&Number(s)==s){const s=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(s,t+1))}if(e.charAt(++t)){const s=this.tryParse(e.substr(t));if(!re.isPayloadValid(n.type,s))throw new Error("invalid payload");n.data=s}return n}tryParse(e){try{return JSON.parse(e,this.reviver)}catch(e){return!1}}static isPayloadValid(e,t){switch(e){case ie.CONNECT:return oe(t);case ie.DISCONNECT:return void 0===t;case ie.CONNECT_ERROR:return"string"==typeof t||oe(t);case ie.EVENT:case ie.BINARY_EVENT:return Array.isArray(t)&&("number"==typeof t[0]||"string"==typeof t[0]&&-1===se.indexOf(t[0]));case ie.ACK:case ie.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&(this.reconstructor.finishedReconstruction(),this.reconstructor=null)}}class ae{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=te(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}var ce=Object.freeze({__proto__:null,Decoder:re,Encoder:class{constructor(e){this.replacer=e}encode(e){return e.type!==ie.EVENT&&e.type!==ie.ACK||!X(e)?[this.encodeAsString(e)]:this.encodeAsBinary({type:e.type===ie.EVENT?ie.BINARY_EVENT:ie.BINARY_ACK,nsp:e.nsp,data:e.data,id:e.id})}encodeAsString(e){let t=""+e.type;return e.type!==ie.BINARY_EVENT&&e.type!==ie.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data,this.replacer)),t}encodeAsBinary(e){const t=Z(e),n=this.encodeAsString(t.packet),s=t.buffers;return s.unshift(n),s}},get PacketType(){return ie},protocol:5});function de(e,t,n){return e.on(t,n),function(){e.off(t,n)}}const he=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class le extends m{constructor(e,t,n){super(),this.connected=!1,this.recovered=!1,this.receiveBuffer=[],this.sendBuffer=[],this._queue=[],this._queueSeq=0,this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this._opts=Object.assign({},n),this.io._autoConnect&&this.open()}get disconnected(){return!this.connected}subEvents(){if(this.subs)return;const e=this.io;this.subs=[de(e,"open",this.onopen.bind(this)),de(e,"packet",this.onpacket.bind(this)),de(e,"error",this.onerror.bind(this)),de(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(he.hasOwnProperty(e))throw new Error('"'+e.toString()+'" is a reserved event name');if(t.unshift(e),this._opts.retries&&!this.flags.fromQueue&&!this.flags.volatile)return this._addToQueue(t),this;const n={type:ie.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++,s=t.pop();this._registerAckCallback(e,s),n.id=e}const s=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!s||!this.connected)||(this.connected?(this.notifyOutgoingListeners(n),this.packet(n)):this.sendBuffer.push(n)),this.flags={},this}_registerAckCallback(e,t){var n;const s=null!==(n=this.flags.timeout)&&void 0!==n?n:this._opts.ackTimeout;if(void 0===s)return void(this.acks[e]=t);const i=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&this.sendBuffer.splice(t,1);t.call(this,new Error("operation has timed out"))}),s);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(i),t.apply(this,[null,...e])}}emitWithAck(e,...t){const n=void 0!==this.flags.timeout||void 0!==this._opts.ackTimeout;return new Promise(((s,i)=>{t.push(((e,t)=>n?e?i(e):s(t):s(e))),this.emit(e,...t)}))}_addToQueue(e){let t;"function"==typeof e[e.length-1]&&(t=e.pop());const n={id:this._queueSeq++,tryCount:0,pending:!1,args:e,flags:Object.assign({fromQueue:!0},this.flags)};e.push(((e,...s)=>{if(n!==this._queue[0])return;return null!==e?n.tryCount>this._opts.retries&&(this._queue.shift(),t&&t(e)):(this._queue.shift(),t&&t(null,...s)),n.pending=!1,this._drainQueue()})),this._queue.push(n),this._drainQueue()}_drainQueue(e=!1){if(!this.connected||0===this._queue.length)return;const t=this._queue[0];t.pending&&!e||(t.pending=!0,t.tryCount++,this.flags=t.flags,this.emit.apply(this,t.args))}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){"function"==typeof this.auth?this.auth((e=>{this._sendConnectPacket(e)})):this._sendConnectPacket(this.auth)}_sendConnectPacket(e){this.packet({type:ie.CONNECT,data:this._pid?Object.assign({pid:this._pid,offset:this._lastOffset},e):e})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e,t){this.connected=!1,delete this.id,this.emitReserved("disconnect",e,t)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case ie.CONNECT:e.data&&e.data.sid?this.onconnect(e.data.sid,e.data.pid):this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case ie.EVENT:case ie.BINARY_EVENT:this.onevent(e);break;case ie.ACK:case ie.BINARY_ACK:this.onack(e);break;case ie.DISCONNECT:this.ondisconnect();break;case ie.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];null!=e.id&&t.push(this.ack(e.id)),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e),this._pid&&e.length&&"string"==typeof e[e.length-1]&&(this._lastOffset=e[e.length-1])}ack(e){const t=this;let n=!1;return function(...s){n||(n=!0,t.packet({type:ie.ACK,id:e,data:s}))}}onack(e){const t=this.acks[e.id];"function"==typeof t&&(t.apply(this,e.data),delete this.acks[e.id])}onconnect(e,t){this.id=e,this.recovered=t&&this._pid===t,this._pid=t,this.connected=!0,this.emitBuffered(),this.emitReserved("connect"),this._drainQueue(!0)}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>{this.notifyOutgoingListeners(e),this.packet(e)})),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:ie.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}onAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.push(e),this}prependAnyOutgoing(e){return this._anyOutgoingListeners=this._anyOutgoingListeners||[],this._anyOutgoingListeners.unshift(e),this}offAnyOutgoing(e){if(!this._anyOutgoingListeners)return this;if(e){const t=this._anyOutgoingListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyOutgoingListeners=[];return this}listenersAnyOutgoing(){return this._anyOutgoingListeners||[]}notifyOutgoingListeners(e){if(this._anyOutgoingListeners&&this._anyOutgoingListeners.length){const t=this._anyOutgoingListeners.slice();for(const n of t)n.apply(this,e.data)}}}function ue(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}ue.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},ue.prototype.reset=function(){this.attempts=0},ue.prototype.setMin=function(e){this.ms=e},ue.prototype.setMax=function(e){this.max=e},ue.prototype.setJitter=function(e){this.jitter=e};class pe extends m{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,v(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=t.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new ue({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const s=t.parser||ce;this.encoder=new s.Encoder,this.decoder=new s.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(~this._readyState.indexOf("open"))return this;this.engine=new Y(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const s=de(t,"open",(function(){n.onopen(),e&&e()})),i=de(t,"error",(t=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;0===e&&s();const n=this.setTimeoutFn((()=>{s(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(s),this.subs.push(i),this}connect(e){return this.open(e)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(de(e,"ping",this.onping.bind(this)),de(e,"data",this.ondata.bind(this)),de(e,"error",this.onerror.bind(this)),de(e,"close",this.onclose.bind(this)),de(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){try{this.decoder.add(e)}catch(e){this.onclose("parse error",e)}}ondecoded(e){F((()=>{this.emitReserved("packet",e)}),this.setTimeoutFn)}onerror(e){this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n?this._autoConnect&&!n.active&&n.connect():(n=new le(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t){if(this.nsps[e].active)return}this._close()}_packet(e){const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e,t){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e,t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):e.onreconnect()})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}const me={};function fe(e,t){"object"==typeof e&&(t=e,e=void 0);const n=function(e,t="",n){let s=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(e=void 0!==n?n.protocol+"//"+e:"https://"+e),s=K(e)),s.port||(/^(http|ws)$/.test(s.protocol)?s.port="80":/^(http|ws)s$/.test(s.protocol)&&(s.port="443")),s.path=s.path||"/";const i=-1!==s.host.indexOf(":")?"["+s.host+"]":s.host;return s.id=s.protocol+"://"+i+":"+s.port+t,s.href=s.protocol+"://"+i+(n&&n.port===s.port?"":":"+s.port),s}(e,(t=t||{}).path||"/socket.io"),s=n.source,i=n.id,o=n.path,r=me[i]&&o in me[i].nsps;let a;return t.forceNew||t["force new connection"]||!1===t.multiplex||r?a=new pe(s,t):(me[i]||(me[i]=new pe(s,t)),a=me[i]),n.query&&!t.query&&(t.query=n.queryKey),a.socket(n.path,t)}Object.assign(fe,{Manager:pe,Socket:le,io:fe,connect:fe});const ge=["Austurland","WatertownsConfederation","PuertoCaballo","Kasa","Greneclyf","Firtree","FarbrookRepublic","Asterion","Arcturia","CrystalEmpire","ChangelingLands","DragonIsles","Equestria","GriffonianEmpire","GriffonianRepublic","NewMareland","NorthernDuchy","NovaGriffonia","Olenia","Pingland","PolarBearConfederation","RiverFederation","Stalliongrad","Yakyakistan"],ye=["Austurland","Watertowns Confederation","Puerto Caballo","Kasa","Greneclyf","Firtree","Farbrook Republic","Asterion","Arcturia","Crystal Empire","Changeling Lands","Dragon Isles","Equestria","Griffonian Empire","Griffonian Republic","New Mareland","Northern Duchy","Nova Griffonia","Olenia","Pingland","Polar Bear Confederation","River Federation","Stalliongrad","Yakyakistan"];let Ee=-1,ve=0,be=Date.now(),Be=[],ke=0,we=0,Ie=!0,_e=!1,Le=!1,Ce=0,Ae=0,Oe=20,Re="";async function Te(){const e=fe();setInterval((()=>{0===ke&&_e&&(document.getElementById("id5").value=((Date.now()-be)/1e3).toFixed(2))}),1),e.on("connect",(()=>{document.getElementById("okno").style.display="none",document.getElementById("id10").classList.add("hidden"),document.getElementById("id10t").classList.add("hidden"),document.getElementById("id8").classList.add("hidden"),document.getElementById("id7").classList.add("hidden"),document.getElementById("id1").classList.add("hidden"),document.getElementById("id1t").classList.add("hidden"),document.getElementById("id2").classList.add("hidden"),document.getElementById("id2t").classList.add("hidden"),document.getElementById("id3").value="Unknown pony",document.Name="",document.getElementById("id6").src="bin/images/original.png",console.log(e.id),e.on("LeaderBoard",(function(e){document.getElementById("id4").value=e,console.log(e)})),e.on("MessageFromServer",(function(e){const t=document.getElementById("id15").value;document.getElementById("id15").value=t+e,console.log(e)})),e.on("LoadHistory",(function(e){document.getElementById("id15").value=e,console.log(e)})),e.on("CountOnline",(function(e){console.log("приветики пистолетики"+e),document.getElementById("id16").textContent="Bronies on site: "+e}))})),e.on("disconnect",(()=>{console.log(e.id)})),document.getElementById("id0").addEventListener("click",(e=>{Ie&&(_e=!0,Le=!1,document.getElementById("id9").value="Break game",document.getElementById("id7").value="Previous answer",document.getElementById("id1").value="",document.getElementById("id2").value="",document.getElementById("id2").style.color="FF01FF",document.getElementById("id7").classList.remove("hidden"),document.getElementById("id1").classList.remove("hidden"),document.getElementById("id1t").classList.remove("hidden"),document.getElementById("id2").classList.remove("hidden"),document.getElementById("id2t").classList.remove("hidden"),Be=[],function(e,t){for(;0!=e.length;)e.pop();for(let n=0;n<t;n++)e.push(n)}(Be,Oe),(e=>{let t,n,s=e.length;for(;s;)n=Math.floor(Math.random()*s--),t=e[s],e[s]=e[n],e[n]=t})(Be),console.log(Be),document.getElementById("id6").src="bin/imageNeg/"+ge[Be[0]]+".png",be=Date.now(),Ee=0,ve=0,ke=0,document.getElementById("id10").classList.remove("hidden"),document.getElementById("id10t").classList.remove("hidden"),document.getElementById("id10").value=ve+"/"+Be.length)})),document.getElementById("id9").addEventListener("click",(e=>{_e?(_e=!1,Le=!0,document.getElementById("id1").value="",document.getElementById("id9").value="Training mode",document.getElementById("id2").classList.add("hidden"),document.getElementById("id2t").classList.add("hidden"),document.getElementById("id1").classList.add("hidden"),document.getElementById("id1t").classList.add("hidden"),document.getElementById("id7").classList.add("hidden"),document.getElementById("id10").classList.add("hidden"),document.getElementById("id10t").classList.add("hidden"),document.getElementById("id6").src="bin/images/original.png"):(Ie=!Ie,Ie?(document.getElementById("id0").classList.remove("hidden"),document.getElementById("id11").classList.remove("hidden"),document.getElementById("id11t").classList.remove("hidden"),document.getElementById("id12").classList.remove("hidden"),document.getElementById("id2").classList.remove("hidden"),document.getElementById("id2t").classList.remove("hidden"),document.getElementById("id1").value="",document.getElementById("id9").value="Training mode",document.getElementById("id8").classList.add("hidden"),document.getElementById("id1").classList.add("hidden"),document.getElementById("id1t").classList.add("hidden"),document.getElementById("id7").classList.add("hidden"),document.getElementById("id6").src="bin/images/original.png"):(document.getElementById("id0").classList.add("hidden"),document.getElementById("id11").classList.add("hidden"),document.getElementById("id11t").classList.add("hidden"),document.getElementById("id12").classList.add("hidden"),document.getElementById("id7").value="Next",document.getElementById("id8").value="Previous",document.getElementById("id9").value="Normal mode",document.getElementById("id8").classList.remove("hidden"),document.getElementById("id7").classList.remove("hidden"),document.getElementById("id1").classList.remove("hidden"),document.getElementById("id2").classList.add("hidden"),document.getElementById("id2t").classList.add("hidden"),document.getElementById("id10").classList.add("hidden"),document.getElementById("id10t").classList.add("hidden"),document.getElementById("id6").src="bin/images/"+ge[0]+".png",document.getElementById("id1").value=ye[0],we=0))})),document.getElementById("id18").addEventListener("click",(e=>{console.log(";("),document.getElementById("okno").style.display="none"})),document.getElementById("id11").addEventListener("input",(e=>{document.getElementById("id12").textContent=document.getElementById("id11").value,Oe=document.getElementById("id11").value})),document.getElementById("id8").addEventListener("click",(e=>{Ie||(we-1<0?we=ge.length-1:we--,document.getElementById("id6").src="bin/images/"+ge[we]+".png",document.getElementById("id1").value=ye[we])})),document.getElementById("id7").addEventListener("click",(e=>{Ie&&!1===Le?(-1==Ee&&0!=Be.length&&(Ee=Be.length),Ee>0&&(0===ke?(document.getElementById("id6").src="bin/imageNeg/"+ge[Be[Ee-1]]+".png",document.getElementById("id1").value=ye[Be[Ee-1]],Re===ye[Be[Ee-1]]?document.getElementById("id2").style.color="green":document.getElementById("id2").style.color="red",document.getElementById("id2").value=Re,document.getElementById("id7").value="Back to game",Ce=Date.now(),ke=1):(document.getElementById("id7").value="Previous answer",document.getElementById("id2").value="",document.getElementById("id1").value="",document.getElementById("id2").style.color="#FF01FF",Ae=Date.now(),be=be+Ae-Ce,console.log(((Date.now()-be)/1e3).toFixed(2)),ke=0,Ee!=Be.length?document.getElementById("id6").src="bin/imageNeg/"+ge[Be[Ee]]+".png":(document.getElementById("id6").src="bin/images/original.png",Ee=-1)))):Ie||(we+1>=ge.length?we=0:we++,document.getElementById("id6").src="bin/images/"+ge[we]+".png",document.getElementById("id1").value=ye[we])})),document.getElementById("id14").onkeyup=t=>{if("Enter"===t.code){const t=document.getElementById("id3").value+": "+document.getElementById("id14").value+"\n";console.log(t),document.getElementById("id14").value="";const n=document.getElementById("id15").value;document.getElementById("id15").value=n+t,e.emit("MessageToServer",t)}},document.getElementById("id2").onkeyup=t=>{if(Ie&&-1!=Ee&&1!=ke&&"Enter"===t.code){let t=document.getElementById("id2").value;if(Re=t,t===ye[Be[Ee]]?(ve++,document.getElementById("id1").value="",document.getElementById("id10").value=ve+"/"+Be.length):document.getElementById("id1").value=ye[Be[Ee]],Ee++,Ee>=Be.length){let t={name:"",time:0,score:0};""===document.getElementById("id3").value?t.name="Anonymous":t.name=document.getElementById("id3").value,t.time=((Date.now()-be)/1e3).toFixed(2),t.score=ve,e.emit("FinishGame",t),document.getElementById("okno").style.display="block",ve<6?(document.getElementById("id19").textContent="Ты, как и Марбл, далёк от мира за пределами твоего дома((( "+ve+"/"+ge.length,document.getElementById("id17").src="bin/ponys/Dumb.webp"):ve<12?(document.getElementById("id19").textContent="Ты, как и Коко, настоящий молодец! Но тебе, как и ей, есть куда стремиться) "+ve+"/"+ge.length,document.getElementById("id17").src="bin/ponys/NotDumb.jfif"):ve<18?(document.getElementById("id19").textContent="Ты, как и Рэмбоу Дэш, ооочень крут!!!) "+ve+"/"+ge.length,document.getElementById("id17").src="bin/ponys/Cool.jpg"):ve<24?(document.getElementById("id19").textContent="Поздравляю! Ты, как и Селестия, не один год знаешь пони!!!)))  "+ve+"/"+ge.length,document.getElementById("id17").src="bin/ponys/Genious.webp"):24===ve&&(document.getElementById("id19").textContent="Поздравляю! Ты, как и Селестия, достоин править целой страной пони!!!)))  "+ve+"/"+ge.length,document.getElementById("id17").src="bin/ponys/Genious.webp"),_e=!1,document.getElementById("id2").classList.add("hidden"),document.getElementById("id2t").classList.add("hidden"),document.getElementById("id9").value="Training mode",document.getElementById("id10").classList.add("hidden"),document.getElementById("id10t").classList.add("hidden"),document.getElementById("id1").value="",Ee=-1,Le=!1,document.getElementById("id6").src="bin/images/original.png"}else document.getElementById("id2").value="",document.getElementById("id6").src="bin/imageNeg/"+ge[Be[Ee]]+".png"}}}window.addEventListener("load",(e=>{document.getElementById("id5").value=(Date.now()-be-(Date.now()-be)%1e3)/1e3,Te()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
