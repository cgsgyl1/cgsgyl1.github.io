!function(t){"use strict";function s(t){return t*Math.PI/180}class i{constructor(t,s,i){null==t?(this.x=0,this.y=0,this.z=0):"object"==typeof t?3==t.length?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==i?(this.x=t,this.y=t,this.z=t):(this.x=t,this.y=s,this.z=i)}set(t,s,i){return this.x=t,this.y=s,this.z=i,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}cross(t){return h(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}add(t){return"number"==typeof t?h(this.x+t,this.y+t,this.z+t):h(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return"number"==typeof t?h(this.x-t,this.y-t,this.z-t):h(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return"number"==typeof t?h(this.x*t,this.y*t,this.z*t):h(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return"number"==typeof t?h(this.x/t,this.y/t,this.z/t):h(this.x/t.x,this.y/t.y,this.z/t.z)}len2(){return this.x*this.x+this.y*this.y+this.z*this.z}len(){let t=this.x*this.x+this.y*this.y+this.z*this.z;return 0!=t&&1!=t?Math.sqrt(t):t}normalize(){let t=this.x*this.x+this.y*this.y+this.z*this.z;return 0!=t&&1!=t?(t=Math.sqrt(t),h(this.x/t,this.y/t,this.z/t)):h(this)}toArray(){return[this.x,this.y,this.z]}}function h(...t){return new i(...t)}class m{constructor(t=null){null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s;return s=4==t.length?t:t.m,this.m=[[this.m[0][0]*s[0][0]+this.m[0][1]*s[1][0]+this.m[0][2]*s[2][0]+this.m[0][3]*s[3][0],this.m[0][0]*s[0][1]+this.m[0][1]*s[1][1]+this.m[0][2]*s[2][1]+this.m[0][3]*s[3][1],this.m[0][0]*s[0][2]+this.m[0][1]*s[1][2]+this.m[0][2]*s[2][2]+this.m[0][3]*s[3][2],this.m[0][0]*s[0][3]+this.m[0][1]*s[1][3]+this.m[0][2]*s[2][3]+this.m[0][3]*s[3][3]],[this.m[1][0]*s[0][0]+this.m[1][1]*s[1][0]+this.m[1][2]*s[2][0]+this.m[1][3]*s[3][0],this.m[1][0]*s[0][1]+this.m[1][1]*s[1][1]+this.m[1][2]*s[2][1]+this.m[1][3]*s[3][1],this.m[1][0]*s[0][2]+this.m[1][1]*s[1][2]+this.m[1][2]*s[2][2]+this.m[1][3]*s[3][2],this.m[1][0]*s[0][3]+this.m[1][1]*s[1][3]+this.m[1][2]*s[2][3]+this.m[1][3]*s[3][3]],[this.m[2][0]*s[0][0]+this.m[2][1]*s[1][0]+this.m[2][2]*s[2][0]+this.m[2][3]*s[3][0],this.m[2][0]*s[0][1]+this.m[2][1]*s[1][1]+this.m[2][2]*s[2][1]+this.m[2][3]*s[3][1],this.m[2][0]*s[0][2]+this.m[2][1]*s[1][2]+this.m[2][2]*s[2][2]+this.m[2][3]*s[3][2],this.m[2][0]*s[0][3]+this.m[2][1]*s[1][3]+this.m[2][2]*s[2][3]+this.m[2][3]*s[3][3]],[this.m[3][0]*s[0][0]+this.m[3][1]*s[1][0]+this.m[3][2]*s[2][0]+this.m[3][3]*s[3][0],this.m[3][0]*s[0][1]+this.m[3][1]*s[1][1]+this.m[3][2]*s[2][1]+this.m[3][3]*s[3][1],this.m[3][0]*s[0][2]+this.m[3][1]*s[1][2]+this.m[3][2]*s[2][2]+this.m[3][3]*s[3][2],this.m[3][0]*s[0][3]+this.m[3][1]*s[1][3]+this.m[3][2]*s[2][3]+this.m[3][3]*s[3][3]]],this}setIdentity(){return this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]],this}MatrTranslate(t){let s=(new m).setIdentity;return"object"==typeof t&&(3==t.length?(x=t[0],y=t[1],z=t[2]):(x=t.x,y=t.y,z=t.z)),s.A[3][0]=x,s.A[3][1]=y,s.A[3][2]=z,s}MatrScale(t){let s,i,h,m=e();return"object"==typeof t&&(3==t.length?(s=t[0],i=t[1],h=t[2]):(s=t.x,i=t.y,h=t.z)),m.m[0][0]=s,m.m[1][1]=i,m.m[2][2]=h,m}setRotate(t,s){let i=t*Math.PI,h=Math.sin(i),m=Math.cos(i),e=0,r=0,n=1;"object"==typeof s&&(3==s.length?(e=s[0],r=s[1],n=s[2]):(e=s.x,r=s.y,n=s.z));let o=e*e+r*r+n*n;return 0!=o&&1!=o&&(o=Math.sqrt(o),e/=o,r/=o,n/=o),this.m[0][0]=m+e*e*(1-m),this.m[0][1]=e*r*(1-m)+n*h,this.m[0][2]=e*n*(1-m)-r*h,this.m[0][3]=0,this.m[1][0]=r*e*(1-m)-n*h,this.m[1][1]=m+r*r*(1-m),this.m[1][2]=r*n*(1-m)+e*h,this.m[1][3]=0,this.m[2][0]=n*e*(1-m)+r*h,this.m[2][1]=n*r*(1-m)-e*h,this.m[2][2]=m+n*n*(1-m),this.m[2][3]=0,this.m[3][0]=0,this.m[3][1]=0,this.m[3][2]=0,this.m[3][3]=1,this}setMatrRotateZ(t){let i=(new m).setIdentity,h=s(t),e=Math.cos(h),r=Math.sin(h);return i.m[0][0]=e,i.m[1][1]=e,i.m[0][1]=r,i.m[1][0]=-r,i}setMatrRotateY(t){let i=(new m).setIdentity,h=s(t),e=Math.cos(h),r=Math.sin(h);return i.m[0][0]=e,i.m[2][2]=e,i.m[0][2]=-r,i.m[2][0]=r,i}setMatrRotateX(t){let i=(new m).setIdentity,h=s(t),e=Math.cos(h),r=Math.sin(h);return i.m[1][1]=e,i.m[2][2]=e,i.m[1][2]=r,i.m[2][1]=-r,i}determ3x3(t,s,i,h,m,e,r,n,o){return t*m*o-t*e*n-s*h*o+s*e*r+i*h*n-i*m*r}determ(){return this.m[0][0]*this.determ3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])-this.m[0][1]*this.determ3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+this.m[0][2]*this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])-this.m[0][3]*this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){let t=[[],[],[],[]],s=this.determ();if(0==s){return e([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])}return t[0][0]=this.determ3x3(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t[1][0]=-this.determ3x3(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t[2][0]=this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t[3][0]=-this.determ3x3(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t[0][1]=-this.determ3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t[1][1]=this.determ3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t[2][1]=-this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t[3][1]=this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t[0][2]=this.determ3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/s,t[1][2]=-this.determ3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/s,t[2][2]=this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/s,t[3][2]=-this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/s,t[0][3]=-this.determ3x3(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/s,t[1][3]=this.determ3x3(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/s,t[2][3]=-this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/s,t[3][3]=this.determ3x3(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/s,this.m=t,this}setView(t,s,i){let h=s.sub(t).normalize(),m=h.cross(i).normalize(),e=m.cross(h).normalize();return this.m=[[m.x,e.x,-h.x,0],[m.y,e.y,-h.y,0],[m.z,e.z,-h.z,0],[-t.dot(m),-t.dot(e),t.dot(h),1]],this}setOrtho(t,s,i,h,m,e){return this.m=[[2/(s-t),0,0,0],[0,2/(h-i),0,0],[0,0,-2/(e-m),0],[-(s+t)/(s-t),-(h+i)/(h-i),-(e+m)/(e-m),1]],this}setFrustum(t,s,i,h,m,e){return this.m=[[2*m/(s-t),0,0,0],[0,2*m/(h-i),0,0],[(s+t)/(s-t),(h+i)/(h-i),-(e+m)/(e-m),-1],[0,0,-2*m*e/(e-m),0]],this}view(t,s,i){return this.mul(e().setView(t,s,i))}ortho(t,s,i,h,m,r){return this.mul(e().setOrtho(t,s,i,h,m,r))}frustum(t,s,i,h,m,r){return this.mul(e().setFrustum(t,s,i,h,m,r))}transform(t){let s=t.x*this.m[0][3]+t.y*this.m[1][3]+t.z*this.m[2][3]+this.m[3][3];return h((t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0]+this.m[3][0])/s,(t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1]+this.m[3][1])/s,(t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2])/s)}transformVector(t){return h(t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0],t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2])}transformPoint(t){return h(t.x*this.m[0][0]+t.y*this.m[1][0]+t.z*this.m[2][0]+this.m[3][0],t.x*this.m[0][1]+t.y*this.m[1][1]+t.z*this.m[2][1]+this.m[3][1],t.x*this.m[0][2]+t.y*this.m[1][2]+t.z*this.m[2][2]+this.m[3][2])}toArray(){return[].concat(...this.m)}}function e(...t){return new m(...t)}class r{constructor(){this.projSize=.1,this.projDist=.1,this.projFarClip=1800,this.frameW=1e3,this.frameH=1e3,this.matrView=e(),this.matrProj=e(),this.matrVP=e(),this.loc=h(),this.at=h(),this.dir=h(),this.up=h(),this.right=h(),this.setDef()}set(t,s,i){this.matrView.setView(t,s,i),this.loc=h(t),this.at=h(s),this.dir.set(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.up.set(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.right.set(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.matrVP=e(this.matrView).mul(this.matrProj)}setProj(t,s,i){let h=t,m=t;this.projDist=s,this.projSize=t,this.projFarClip=i,this.frameW>this.frameH?h*=this.frameW/this.frameH:m*=this.frameH/this.frameW,this.matrProj.setFrustum(-h/2,h/2,-m/2,m/2,s,i),this.matrVP=e(this.matrView).mul(this.matrProj)}setSize(t,s){t<1&&(t=1),s<1&&(s=1),this.frameW=t,this.frameH=s,this.setProj(this.projSize,this.projDist,this.projFarClip)}setDef(){this.loc.set(0,0,8),this.at.set(0,0,0),this.dir.set(0,0,-1),this.up.set(0,1,0),this.right.set(1,0,0),this.projDist=.1,this.projSize=.1,this.projFarClip=1800,this.frameW=1e3,this.frameH=1e3,this.setProj(this.projSize,this.projDist,this.projFarClip),this.set(this.loc,this.at,this.up),this.setSize(this.frameW,this.frameH)}}function n(t,s){return e(t).mul(s)}class o{constructor(t=null){if(null==t)this.pos=[0,0,0],this.color=[0,0,0,0],this.normal=[0,0,0];else if("object"==typeof t&&3==t.length)this.pos=t[0],this.color=t[1],this.normal=t[2];else if("object"==typeof t&&10==t.length)this.pos=[t[0],t[1],t[2]],this.color=[t[3],t[4],t[5],t[6]],this.normal=[t[7],t[8],t[9]];else{let t=arguments.length;this.pos=[0,0,0],this.color=[0,0,0,0],this.normal=[0,0,0];for(let t=0;t<3;t++)this.pos[t]=arguments[t];for(let t=3;t<7;t++)this.color[t-3]=arguments[t];10==t&&(this.normal=[arguments[7],arguments[8],arguments[9]])}}toArray(){return[].concat(this.pos,this.color,this.normal)}}function l(...t){return new o(...t)}class a{constructor(t,s,i,h,m){this.Trans=e().setIdentity(),null!=s&&(this.VA=t.createVertexArray(),this.VBuf=t.createBuffer(),t.bindVertexArray(this.VA),t.bindBuffer(t.ARRAY_BUFFER,this.VBuf),t.bufferData(t.ARRAY_BUFFER,new Float32Array(s),t.STATIC_DRAW),t.vertexAttribPointer(0,3,t.FLOAT,!1,40,0),t.vertexAttribPointer(1,4,t.FLOAT,!1,40,12),t.vertexAttribPointer(2,3,t.FLOAT,!1,40,28),t.enableVertexAttribArray(0),t.enableVertexAttribArray(1),t.enableVertexAttribArray(2),t.bindVertexArray(null)),null!=h?(this.IBuf=t.createBuffer(),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,this.IBuf),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint32Array(h),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),this.NumofElements=h.length):this.NumofElements=s.length,this.NV=i,this.shader=m,this.gl=t}}function u(...t){return new a(...t)}function c(t,s,i){let h=n(t.Trans,i);!function(t){let s=e([[0,0,0,0],[0,0,0,0],[0,0,0,0],[0,0,0,0]]);for(let i=0;i<4;i++)for(let h=0;h<4;h++)s.m[i][h]=t.m[h][i]}(e(h).inverse());let m=n(h,s.matrVP);t.gl.useProgram(t.shader),t.gl.bindVertexArray(t.VA);let r=t.gl.getUniformLocation(t.shader,"MatrWVP");null!=r&&t.gl.uniformMatrix4fv(r,!1,new Float32Array(m.toArray())),null!=t.IBuf?(t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,t.IBuf),t.gl.drawElements(t.gl.TRIANGLES,t.NumofElements,t.gl.UNSIGNED_INT,0),t.gl.bindBuffer(t.gl.ELEMENT_ARRAY_BUFFER,null)):t.gl.drawArrays(t.gl.TRIANGLES,0,t.NumofElements),t.gl.bindVertexArray(null),t.gl.useProgram(null)}function f(t,s,i,m){let e=[],r=[],n=async function(t){try{const s=await fetch(t);return await s.text()}catch(t){console.log(t)}}(i),o=Promise.all([n]).then((t=>{const i=t[0].split("\n");let n,o=i.length;console.log(o);for(let t=0;t<o;t++){let s=i[t];if("v"==s[0]&&" "==s[1]){let t,i,h,m=s.split(" ");t=parseFloat(m[1]),i=parseFloat(m[2]),h=parseFloat(m[3]);let e=l();e.color=[1,0,1,1],e.pos=[t,i,h],r.push(e)}else if("f"==s[0]&&" "==s[1]){let t=s.split(" "),i=t[1].split("//"),h=t[2].split("//"),m=t[3].split("//");e.push(parseInt(i[0])-1),e.push(parseInt(h[0])-1),e.push(parseInt(m[0])-1)}}for(n=0;n<e.length;n+=3){let t=h(r[e[n]].pos),s=h(r[e[n+1]].pos),i=h(r[e[n+2]].pos),m=s.sub(t).cross(i.sub(t)).normalize();r[e[n]].normal=h(r[e[n]].normal).add(m).toArray(),r[e[n+1]].normal=h(r[e[n+1]].normal).add(m).toArray(),r[e[n+2]].normal=h(r[e[n+2]].normal).add(m).toArray()}for(n=0;n<r.length;n++)r[n].normal=h(r[n].normal).normalize().toArray();let a=u(s,function(t){let s=[];for(let i=0;i<t.length;i++)s.push(...t[i].toArray());return s}(r),r.lenght,e,m);return a}));return o}function d(t,s,i){const h=t.createShader(s);return t.shaderSource(h,i),t.compileShader(h),t.getShaderParameter(h,t.COMPILE_STATUS)||alert("Shader not compiled!"),h}function p(){const t=document.getElementById("glCanvas").getContext("webgl2");t.clearColor(1,.75,.79,1),t.clear(t.COLOR_BUFFER_BIT);const s=d(t,t.VERTEX_SHADER,"#version 300 es\n        precision highp float;\n        layout(location = 0) in vec3 in_pos;\n        layout(location = 1) in vec4 in_color;\n        layout(location = 2) in vec3 in_normal;\n        uniform mat4 MatrWVP;        \n        out vec4 v_color;\n\n        void main() {\n            float nl;\n            nl = dot(normalize(in_normal), normalize(vec3(2, 2, 2)));\n            if (nl < 0.1)\n                nl = 0.1;\n            gl_Position = MatrWVP * vec4(in_pos, 1);\n            v_color = vec4(1, 0.5, 1, 1) * nl;\n        }\n    "),i=d(t,t.FRAGMENT_SHADER,"#version 300 es\n        precision highp float;\n        out vec4 f_color;\n        in vec4 v_color;\n\n        void main() {\n            f_color = v_color;\n        }\n    "),m=t.createProgram();t.attachShader(m,s),t.attachShader(m,i),t.linkProgram(m),t.createBuffer();let o=u(t,[0,0,1,0,1,0,1,1,0,0,0,1,1,1,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,0,1,1,1,0,1,1,0,0,1,0,1,1,0,1,1,-1,0,0,1,1,1,0,1,1,1,-1,0,0,1,1,0,1,0,0,1,-1,0,0,1,0,0,0,1,0,1,-1,0,0,1,0,0,1,0,1,1,0,1,0,0,0,0,1,.5,1,.3,0,1,0,0,1,0,1,1,.4,1,0,1,0,1,1,0,1,1,.5,.4,0,1,0,0,0,0,1,0,0,1,0,-1,0,0,0,1,1,0,0,1,0,-1,0,0,1,1,1,0,1,1,0,-1,0,0,1,0,1,0,0,1,0,-1,0,0,1,1,1,0,0,1,0,0,1,0,1,0,1,1,1,1,0,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,0,1,0,0,1,1,0,0,1,0,0,-1,0,0,0,1,0,0,1,0,0,-1,1,0,0,1,0,0,1,0,0,-1,1,0,1,1,0,1,1,0,0,-1],24,[0,1,2,0,2,3,4,5,6,4,6,7,8,9,10,8,10,11,12,13,14,12,14,15,16,17,18,16,18,19,20,21,22,20,22,23],m),l=function(...t){return new r(...t)}();o=f(0,t,"./cow.obj",m).then((s=>{o=s;const i=()=>{t.enable(t.DEPTH_TEST),c(o,l,n(e().MatrScale([.1,.1,.1]),e().setRotate(Math.sin(Date.now()/1e3%1e3),h(2,2,2)))),window.requestAnimationFrame(i)};i()}))}window.addEventListener("load",(()=>{p()})),t.initGL=p,t.vec3=h}({});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
